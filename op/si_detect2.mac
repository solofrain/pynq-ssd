shared long array si_dat[96][3]
SI_DETECT="172.16.1.2:15000"

def si_init '
# open socket connection
	if(!sock_io(SI_DETECT,"connect")){
		printf("Cannot connect to detector!") 
		}
'

def si_done '
# close socket connection
	sock_io(SI_DETECT,"send","q\n")
	sock_io(SI_DETECT,"close")
'

def user_getcounts '
# Read all three chips counters into si_dat array
global si_dat

local a,b,c,si_n1,si_n2,si_n3,si_i
local si_tmp1,si_tmp2,si_tmp3

sock_io(SI_DETECT,"send","r 0\n")
a=sock_io(SI_DETECT,"read")
#print "Got chip 0."
sock_io(SI_DETECT,"send","r 1\n")
b=sock_io(SI_DETECT,"read")
#print "Got chip 1."
sock_io(SI_DETECT,"send","r 2\n")
c=sock_io(SI_DETECT,"read")
#print "Got chip 2."
S[1]=0
S[2]=0
S[3]=0
si_n1=split(a,si_temp1)
si_n2=split(b,si_temp2)
si_n3=split(c,si_temp3)
if(((si_n1!=si_n2)||(si_n2!=si_n3)||(si_n3!=si_n1))&&(si_n1!=96)){
	printf("Bad read!\n")
	}
for(si_i=0;si_i<32;si_i++){
	t_i=3*si_i
	si_dat[si_i][0]=int(si_temp1[t_i])
	S[1]+=si_dat[si_i][0]
	si_dat[si_i][1]=int(si_temp1[t_i+1])
	S[2]+=si_dat[si_i][1]
	si_dat[si_i][2]=int(si_temp1[t_i+2])
	S[3]+=si_dat[si_i][2]
	}
for(si_i=0;si_i<32;si_i++){
	t_i=3*si_i
	si_dat[si_i+32][0]=int(si_temp2[t_i])
	S[1]+=si_dat[si_i+32][0]
	si_dat[si_i+32][1]=int(si_temp2[t_i+1])
	S[2]+=si_dat[si_i+32][1]
	si_dat[si_i+32][2]=int(si_temp2[t_i+2])
	S[3]+=si_dat[si_i+32][2]
	}
for(si_i=0;si_i<32;si_i++){
	t_i=3*si_i
	si_dat[si_i+64][0]=int(si_temp3[t_i])
	S[1]+=si_dat[si_i+64][0]
	si_dat[si_i+64][1]=int(si_temp3[t_i+1])
	S[2]+=si_dat[si_i+64][1]
	si_dat[si_i+64][2]=int(si_temp3[t_i+2])
	S[3]+=si_dat[si_i+64][2]
	}

#printf("#chip0\n%s\n#chip1\n%s\n#chip2\n%s\n",a,b,c)

'

def user_precount '
# start detector acquisition
	local si_time, si_ms
# set real count time to be slightly shorter 
# than Specs time to allow full overlap.
	si_ms=(COUNT_TIME*1000)-10
	si_time=sprintf("a %i\n",si_ms)
#	print si_time
#	print "Counting.. ",
	sock_io(SI_DETECT,"send",si_time)
'

def user_postcount '
# read completion string from socket, 
# i.e. wait for acquisition to complete.
#	print "Done. ",
	sock_io(SI_DETECT,"read")
	'
	
def user_scan_loop '
	local i
	on(DATAFILE);offt
	array_op("col_wise",si_dat,1)
	printf("@A ")
	for(i=0;i<96;i++){
		printf("%i ",si_dat[i][0])
		}
		
	printf("\n@B ")
	for(i=0;i<96;i++){
		printf("%i ",si_dat[i][1])
		}
	
	printf("\n@C ")
	for(i=0;i<96;i++){
		printf("%i ",si_dat[i][2])
		}
	printf("\n")
	ont; off(DATAFILE)
'
	
	
